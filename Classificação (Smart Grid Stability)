import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, classification_report
import seaborn as sns
import matplotlib.pyplot as plt


df = pd.read_csv("/content/smart_grid_stability_augmented.csv")

print(df.head())

X = df.drop(columns=["stabf"])
y = df["stabf"]

y = y.map({"stable": 0, "unstable": 1})

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

models = {
    "√Årvore de Decis√£o": DecisionTreeClassifier(random_state=42),
    "KNN": KNeighborsClassifier(n_neighbors=5),
    "Regress√£o Log√≠stica": LogisticRegression(max_iter=1000)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)

    results[name] = {"Acur√°cia": acc, "F1-score": f1, "Matriz de Confus√£o": cm}

for name, metrics in results.items():
    print(f"\nüîπ {name}")
    print(f"Acur√°cia: {metrics['Acur√°cia']:.4f}")
    print(f"F1-score: {metrics['F1-score']:.4f}")
    print("Matriz de Confus√£o:\n", metrics["Matriz de Confus√£o"])

    sns.heatmap(metrics["Matriz de Confus√£o"], annot=True, fmt="d", cmap="Blues")
    plt.title(f"Matriz de Confus√£o - {name}")
    plt.xlabel("Previsto")
    plt.ylabel("Real")
    plt.show()
