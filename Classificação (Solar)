import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

def evaluate_model(model, X_test, y_test, model_name):
    """
    Treina e avalia um modelo, exibindo a acurácia e a matriz de confusão.
    """
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)

    print(f"\n Desempenho do Modelo: {model_name}")
    print(f"Acurácia: {accuracy:.4f}")

    # Plotar a matriz de confusão
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Baixa Radiação', 'Alta Radiação'])
    fig, ax = plt.subplots(figsize=(6, 6))
    disp.plot(ax=ax, cmap='Blues')
    ax.set_title(f"Matriz de Confusão: {model_name}", fontsize=14)
    ax.set_xlabel("Rótulo Predito")
    ax.set_ylabel("Rótulo Verdadeiro")
    plt.show()
    return accuracy

# Carregue o dataset
file_path = '/content/SolarPrediction.csv'
df = pd.read_csv(file_path)


# Limpar os nomes das colunas
df.columns = df.columns.str.replace('[^A-Za-z0-9_]+', '', regex=True)

# Criar a variável-alvo 'Radiation_Class'
median_radiation = df['Radiation'].median()
df['Radiation_Class'] = (df['Radiation'] > median_radiation).astype(int)

# Definir X e y
features = ['Temperature', 'Pressure', 'Humidity', 'WindDirectionDegrees', 'Speed']
target = 'Radiation_Class'

X = df[features]
y = df[target]

# Dividir os dados em treino e teste (70/30)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Treinar e avaliar os modelos

# Árvore de Decisão
print("Treinando Árvore de Decisão...")
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train_scaled, y_train)
dt_accuracy = evaluate_model(dt_model, X_test_scaled, y_test, "Árvore de Decisão")

# Random Forest
print("\nTreinando Random Forest...")
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)
rf_accuracy = evaluate_model(rf_model, X_test_scaled, y_test, "Random Forest")

# Support Vector Machine (SVM)
print("\nTreinando SVM...")
svm_model = SVC(random_state=42)
svm_model.fit(X_train_scaled, y_train)
svm_accuracy = evaluate_model(svm_model, X_test_scaled, y_test, "SVM")

# Comparar os resultados
print("\n Resumo de Acurácia dos Modelos")
print(f"Árvore de Decisão: {dt_accuracy:.4f}")
print(f"Random Forest: {rf_accuracy:.4f}")
print(f"SVM: {svm_accuracy:.4f}")
